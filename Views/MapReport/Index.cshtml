@using PinewoodGrow.ViewModels


@{
    ViewData["Title"] = "Index";
}
@*Lowest
    Low
    Mid
    High
    Top*@

<div class="test1">
    <h1 id="test">Maps</h1>
</div>
<link rel="stylesheet" href="/css/MapStyle.css" />
<style>
</style>

<div style="margin: 22px">
    <div class="form-inline d-flex justify-content-center md-form form-sm mt-0">
        <i class="fas fa-search" aria-hidden="true"></i>
        <input class="form-control form-control-sm ml-3 w-75" type="text" placeholder="Search"
               aria-label="Search" id="autocomplete">
    </div>

    <div class="row">
        <div class="custom-control custom-switch m-3">
            <input type="checkbox" checked="checked" class="custom-control-input green" id="TopSwitch" style="" onclick="filter()">
            <label class="custom-control-label green" for="TopSwitch">20-25k</label>
        </div>
        <div class="custom-control custom-switch m-3">
            <input type="checkbox" checked="checked" class="custom-control-input yellow" id="HighSwitch" onclick="filter()">
            <label class="custom-control-label yellow" for="HighSwitch">15-20k</label>
        </div>
        <div class="custom-control custom-switch m-3">
            <input type="checkbox" checked="checked" class="custom-control-input purple" id="MidSwitch" onclick="filter()">
            <label class="custom-control-label purple" for="MidSwitch">10-15k</label>
        </div>
        <div class="custom-control custom-switch m-3">
            <input type="checkbox" checked="checked" class="custom-control-input red" id="LowSwitch" onclick="filter()">
            <label class="custom-control-label red" for="LowSwitch">5-10k</label>
        </div>
        <div class="custom-control custom-switch m-3">
            <input type="checkbox" checked="checked" class="custom-control-input blue" id="LowestSwitch" onclick="filter()">
            <label class="custom-control-label blue" for="LowestSwitch">0-5k</label>
        </div>
        @*<textarea id="output" style="width: 70vw; height: 70vh; margin: 10vh 10vw"></textarea>*@
    </div>
</div>
<div id="map" style="height: 900px; width: 100%"></div>

@{
    TravelStats stats = ViewBag.TravelStats;
}

<div class="travel-container">
    <div class="travel-title">
        <h1>Average Travel Times & Distance</h1>
    </div>
    <div class="travel-display colored">
        <div class="distance bg-white">
            <div class="distance-title-color">
                <h2>Grow</h2>
            </div>
            <img src="/svg/GrowDistanceAverage.svg" alt="Average Distance in meters to Grow" />
            <p>@stats.Grow.DistanceFormat</p>
        </div>
        <div class="travel-avg">
            <img src="/svg/GrowDriveAverage.svg" alt="Average Travel time via driving to grow" />
            <p>@stats.Grow.DriveFormat</p>
        </div>
        <div class="travel-avg">
            <img src="/svg/GrowBikeAverage.svg" alt="Average Travel time via biking to grow" />
            <p>@stats.Grow.BikeFormat</p>
        </div>
        <div class="travel-avg">
            <img src="/svg/GrowWalkAverage.svg" alt="Average Travel time via Waling to grow" />
            <p>@stats.Grow.WalkFormat</p>
        </div>
    </div>
    <div class="travel-display colored">
        <div class="distance bg-white">
            <div class="distance-title-color">
                <h2>Grocery</h2>
            </div>
            <img src="/svg/GrowDistanceAverage.svg" alt="Average Distance in meters to Grow" />
            <p>@stats.Store.DistanceFormat</p>
        </div>
        <div class="travel-avg">
            <img src="/svg/GrowDriveAverage.svg" alt="Average Travel time via driving to grow" />
            <p>@stats.Store.DriveFormat</p>
        </div>
        <div class="travel-avg">
            <img src="/svg/GrowBikeAverage.svg" alt="Average Travel time via biking to grow" />
            <p>@stats.Store.BikeFormat</p>
        </div>
        <div class="travel-avg">
            <img src="/svg/GrowWalkAverage.svg" alt="Average Travel time via Waling to grow" />
            <p>@stats.Store.WalkFormat</p>
        </div>

    </div>
</div>
<h2 style="color: #397a4c;">Graphs</h2>
<div>
    <canvas id="growChart"></canvas>
</div>

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js" 
        integrity="sha512-QSkVNOCYLtj73J4hbmVoOV6KVZuMluZlioC+trLpewV8qMjsWqlIQvkn1KGX2StWvPMdWGBqim1xlC8krl1EKQ==" 
        crossorigin="anonymous" 
        referrerpolicy="no-referrer"></script>*@

<script>


   
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var GrowPoints = [];
    var GroceryPoints = [];
    @{
        List<PinewoodGrow.ViewModels.TravelDataPoints> Points = ViewBag.TravelData;
        foreach (var point in Points.OrderBy(a=> a.Income))
        {
                  <text>
    var growPoint = { x: @point.Income, y: @point.GrowDistance}
    var groceryPoint = { x: @point.Income, y: @point.GroceryDistance}
                        GrowPoints.push(growPoint);
                        GroceryPoints.push(groceryPoint);
                  </text>
        }

    }
 





    const data = {
        datasets: [{
            label: 'Grow',
            backgroundColor: 'rgb(57,122,76)',
            borderColor: 'rgb(57,122,76)',
            data: GrowPoints,
            /*showLine: true,
            tension: 0.4*/

        }, {
            label: 'Grocery Store',
                backgroundColor: 'rgb(255, 99, 132)',
                borderColor: 'rgb(255, 99, 132)',
                 data: GroceryPoints,
                /*showLine: true,
                tension: 0.4*/

            }]
    };

    const config = {
        type: 'scatter',
        data: data,
        options: {
            /*title: {
                display: true,
                text: 'Household Distance to Grow Community Market And Grocery Store by Household Income'
            },*/
                    plugins: {
            title: {
                display: true,
                            text: 'Household Distance to Grow Community Market / Grocery Store by Household Income',
                font: {
                    size: 20,
                    lineHeight: 1.2
                }
            }
        },
                    scales: {
            x: {
                beginAtZero: true,
                title: {
                    display: true,
                    text: 'Household Income',
                    font: {
                        size: 18,
                        lineHeight: 1.2
                    }
                }
            },
            y: {
                beginAtZero: true,
                title: {
                    display: true,
                    text: 'Distance Meters',
                    font: {
                        size: 18,
                        lineHeight: 1.2
                    }
                }
            }
            }
                    }
    };
  
</script>
<script>
    const myChart = new Chart(
        document.getElementById('growChart'),
        config
    );
</script>


<script src="js/MapPopup.js"></script>
<script src="js/StorePopup.js"></script>
<script>

    window.customElements.define('marker-pop', pop);
    window.customElements.define('store-pop', storePop);
    let autocomplete;
    var MarkersArr = [];
    var map;
    function initMap() {
        const infoWindow = new google.maps.InfoWindow();
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'),
            {
                types: ['address'],
                componentRestrictions: { 'country': ['CA'] },
                fields: ['geometry', 'name', 'address_component']
            });
        autocomplete.addListener('place_changed', onPlaceChanged);

        // The location of Grow
        const Grow = { lat: 43.1103481, lng: -79.0789613 };
        // The map, centered at Grow
        map = new window.google.maps.Map(document.getElementById("map"),
            {
                zoom: 16,
                center: Grow,
                mapId: 'db31debbd2731710'
            });
        //Grow Maker
        const MainMarker = new google.maps.Marker({
            position: Grow,
            map: map,
            title: 'Grow',
            icon: '/images/GrowMapIcon.png',

        });
        google.maps.event.addListenerOnce(map, 'idle', function(){
            window.jQuery('gm-style-iw gm-style-iw-c').prev('div').remove();
        });


        //Creates markers for All Grocery Stores

        @{
            List<PinewoodGrow.ViewModels.StoreMapMarker> Stores = ViewBag.Stores;
            foreach (var store in Stores)
            {
                <text>

                    var marker = new window.google.maps.Marker({
                        map: map,
                        category: 'store',
                        position: { lat: @store.Lat, lng: @store.Lng },
                        title: '@store.Name',
                        icon: '/images/storeIcon.png',

                    });
                    google.maps.event.addListener(marker, 'click', function(){
                        infoWindow.close(); // Close previously opened infowindow
                        infoWindow.setContent(`<store-pop name="@store.Name" data-fullAddress="@store.FullAddress" data-households="@store.HouseholdCount" data-members="@store.MemberCount"></store-pop>`);
                        infoWindow.open(map, this);
                    });
                </text>
            }
        }

        //Creates markers for all households
        @{
                List<PinewoodGrow.ViewModels.MapMarker> mapMarkers = ViewBag.Markers;
            foreach (var mapMarker in mapMarkers)
            {


                <text>

                    var marker = new window.google.maps.Marker({
                        map: map,
                        category: '@mapMarker.Category',
                        position: { lat: @mapMarker.Lat, lng: @mapMarker.Lng },
                        title: '@mapMarker.Address',
                        icon: '@mapMarker.Icon',
                        content: '<marker-pop name="@mapMarker.Address"></marker-pop>'
                    });
                    google.maps.event.addListener(marker, 'click', function(){
                        infoWindow.close(); // Close previously opened infowindow
                        infoWindow.setContent(`<marker-pop name="@mapMarker.Address" data-size="@mapMarker.FamilySize" data-income="@mapMarker.Income"
                                                data-growDrive="@mapMarker.GrowDrive" data-growBike= "@mapMarker.GrowBike" data-growWalk="@mapMarker.GrowWalk"  data-growDistance="@mapMarker.GrowDistance"
                                                data-groceryDrive = "@mapMarker.GroceryDrive" data-groceryBike = "@mapMarker.GroceryBike" data-groceryWalk = "@mapMarker.GroceryWalk" data-groceryDistance = "@mapMarker.GroceryDistance"
                                                data-groceryName = "@mapMarker.GroceryName" data-background= "@mapMarker.Color" data-familyName="@mapMarker.FamilyName" data-id="@mapMarker.ID" ></marker-pop>`);
                        infoWindow.open(map, this);
                    });
                    //Adds markers to javascript marker array
                    MarkersArr.push(marker);
                </text>

            }
        }

        //Closses Popup when clicking map
        google.maps.event.addListener(map, "click", function(event) {
            infoWindow.close();
        });

        //When new place is entered move map to said locaiton
        function onPlaceChanged() {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                document.getElementById('autocomplete').placeholder = 'Enter a place';
                return;
            }
            map.setCenter({ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() });

        }
    }
    //Filters markers
    function filter() {
        var Top = document.getElementById('TopSwitch').checked;
        var High = document.getElementById('HighSwitch').checked;
        var Mid = document.getElementById('MidSwitch').checked;
        var Low = document.getElementById('LowSwitch').checked;
        var Lowest = document.getElementById('LowestSwitch').checked;

        for (var i = 0; i < MarkersArr.length; i++) {
            if ((MarkersArr[i].category === "Top" && Top) ||
                (MarkersArr[i].category === "High" && High) ||
                (MarkersArr[i].category === "Mid" && Mid) ||
                (MarkersArr[i].category === "Low" && Low) ||
                (MarkersArr[i].category === "Lowest" && Lowest)) {
                MarkersArr[i].setMap(map);
                console.log(MarkersArr[i]);
            }
            else
                MarkersArr[i].setMap(null);
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBL-MHoHXLeE8E2WJKgnX60Rq03qo9EYxU&libraries=places&callback=initMap" async defer>
</script>
<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>





